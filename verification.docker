FROM ubuntu:14.04

# Taken from github.com/klee/klee

# FIXME: Docker doesn't currently offer a way to
# squash the layers from within a Dockerfile so
# the resulting image is unnecessarily large!

ENV LLVM_VERSION=3.4 \
    SOLVERS=STP \
    STP_VERSION=2.1.2 \
    DISABLE_ASSERTIONS=0 \
    ENABLE_OPTIMIZED=1 \
    KLEE_UCLIBC=klee_uclibc_v1.0.0 \
    KLEE_SRC=/home/klee/klee_src \
    COVERAGE=0 \
    BUILD_DIR=/home/klee/klee_build \
    USE_CMAKE=1 \
    ASAN_BUILD=0 \
    UBSAN_BUILD=0 \
    LD_LIBRARY_PATH=/home/klee/klee_build/stp/build/lib \
    TRAVIS_OS_NAME=linux

RUN apt-get update && \
    apt-get -y --no-install-recommends install \
        clang-${LLVM_VERSION} \
        llvm-${LLVM_VERSION} \
        llvm-${LLVM_VERSION}-dev \
        llvm-${LLVM_VERSION}-runtime \
        llvm \
        libcap-dev \
        git \
        subversion \
        cmake \
        make \
        libboost-program-options-dev \
        python3 \
        python3-dev \
        python3-pip \
        perl \
        flex \
        bison \
        libncurses-dev \
        zlib1g-dev \
        patch \
        wget \
        unzip \
        camlp4-extra \
        binutils && \
    pip3 install -U lit tabulate && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 50 && \
    #( wget -O - http://download.opensuse.org/repositories/home:delcypher:z3/xUbuntu_14.04/Release.key | apt-key add - ) && \
    #echo 'deb http://download.opensuse.org/repositories/home:/delcypher:/z3/xUbuntu_14.04/ /' >> /etc/apt/sources.list.d/z3.list && \
    apt-get update && \
    apt-get clean

# Download and build Klee
RUN mkdir -p ${KLEE_SRC}
RUN git clone --depth 1 -b timed-access-dirty https://github.com/zpzigi754/vignat-klee ${KLEE_SRC}

# Create build directory
RUN mkdir -p ${BUILD_DIR}

# Build/Install SMT solvers (use TravisCI script)
RUN cd ${BUILD_DIR} && ${KLEE_SRC}/.travis/solvers.sh

# Install testing utils (use TravisCI script)
RUN cd ${BUILD_DIR} && mkdir test-utils && cd test-utils && \
    ${KLEE_SRC}/.travis/testing-utils.sh

# FIXME: All these hacks need to be removed. Once we no longer
# need to support KLEE's old build system they can be removed.

# FIXME: This is a nasty hack so KLEE's configure and build finds
# LLVM's headers file, libraries and tools
RUN sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin && \
    sudo ln -s /usr/bin/llvm-config /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-config && \
    sudo ln -s /usr/bin/llvm-dis /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-dis && \
    sudo ln -s /usr/bin/llvm-as /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-as && \
    sudo ln -s /usr/bin/llvm-link /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-link && \
    sudo ln -s /usr/bin/llvm-ar /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/llvm-ar && \
    sudo ln -s /usr/bin/opt /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/opt && \
    sudo ln -s /usr/bin/lli /usr/lib/llvm-${LLVM_VERSION}/build/Release/bin/lli && \
    sudo mkdir -p /usr/lib/llvm-${LLVM_VERSION}/build/include && \
    sudo ln -s /usr/include/llvm-${LLVM_VERSION}/llvm /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm && \
    sudo ln -s /usr/include/llvm-c-${LLVM_VERSION}/llvm-c /usr/lib/llvm-${LLVM_VERSION}/build/include/llvm-c && \
    for static_lib in /usr/lib/llvm-${LLVM_VERSION}/lib/*.a ; do sudo ln -s ${static_lib} /usr/lib/`basename ${static_lib}`; done

# FIXME: This is **really gross**. The Official Ubuntu LLVM packages don't ship
# with ``FileCheck`` or the ``not`` tools so we have to hack building these
# into KLEE's build system in order for the tests to pass
RUN [ "X${USE_CMAKE}" != "X1" ] && ( cd ${KLEE_SRC}/tools && \
    for tool in FileCheck not; do \
        svn export \
        http://llvm.org/svn/llvm-project/llvm/branches/release_34/utils/${tool} ${tool} ; \
        sed -i 's/^USEDLIBS.*$/LINK_COMPONENTS = support/' ${tool}/Makefile; \
    done && \
    sed -i '0,/^PARALLEL_DIRS/a PARALLEL_DIRS += FileCheck not' Makefile ) || echo "Skipping hack"

# FIXME: The current TravisCI script expects clang-${LLVM_VERSION} to exist
RUN sudo ln -s /usr/bin/clang /usr/bin/clang-${LLVM_VERSION} && \
    sudo ln -s /usr/bin/clang++ /usr/bin/clang++-${LLVM_VERSION}

# Build KLEE (use TravisCI script)
# Hack: disable testing by imeediately terminating the script after installation
RUN sed -i '/# Testing/a exit 0' ${KLEE_SRC}/.travis/klee.sh
RUN sed -i '/# Unit tests/a exit 0' ${KLEE_SRC}/.travis/klee.sh

RUN cd ${BUILD_DIR} && ${KLEE_SRC}/.travis/klee.sh

RUN echo 'apt-get update && apt-get install -y --no-install-recommends linux-headers-4.4.0-142-generic && apt-get clean'>install-linux-headers.sh

RUN bash install-linux-headers.sh

# Install the principal body of required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget build-essential libpcap-dev \
    tcpdump \
    parallel \
    software-properties-common \
    libcap-dev git \
    subversion cmake make libboost-program-options-dev \
    python3 python3-dev python3-pip perl flex bison libncurses-dev \
    zlib1g-dev patch wget unzip binutils && \
    pip3 install -U lit tabulate && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 50 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mv /usr/sbin/tcpdump /usr/bin/tcpdump
# ^^ last line to avoid the apparmor issue for running
# libcrypto.so in --privileged

# Set-up OPAM for ocaml corebuild util and the Core library
RUN add-apt-repository ppa:avsm/ppa && apt-get update && \
    apt-get install -y --no-install-recommends m4 ocaml opam && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN useradd -m vigor && \
    echo vigor:vigor | chpasswd && \
    cp /etc/sudoers /etc/sudoers.bak && \
    echo 'vigor ALL=(root) NOPASSWD: ALL' >> /etc/sudoers
USER vigor

RUN sudo chown --recursive vigor: ${KLEE_SRC}
RUN sudo chown --recursive vigor: ${BUILD_DIR}

# Download and extract DPDK
WORKDIR /home/vigor

# -k means that the outdated certificate check will be bypassed in curl
RUN echo '-k'>/home/vigor/.curlrc

# And install those libraries
RUN opam init -a -y --disable-sandboxing && \
    echo "eval \`opam config env\`" >> /home/vigor/.bashrc && \
    opam install ocamlfind core.112.35.00 sexplib.112.35.00 menhir -y

RUN wget http://dpdk.org/browse/dpdk/snapshot/dpdk-16.04.tar.gz -O dpdk.tar.gz && \
    tar xf dpdk.tar.gz && \
    mv dpdk-* dpdk && \
    rm dpdk.tar.gz

# Build DPDK
WORKDIR /home/vigor/dpdk
RUN sed -ri 's,(PMD_PCAP=).*,\1y,' config/common_linuxapp && \
    make config install -j4 T=x86_64-native-linuxapp-gcc RTE_KERNELDIR=/lib/modules/4.4.0-142-generic/build

ENV RTE_SDK=/home/vigor/dpdk \
    RTE_TARGET=x86_64-native-linuxapp-gcc

WORKDIR /home/vigor

# Download and build VeriFast
#RUN git clone --depth 1 https://github.com/vignat/verifast -b export_path_conditions && \
#    cd verifast/src && \
#    make -j8 verifast

ENV PATH=/home/vigor/.opam/system/bin:/home/vigor/verifast/bin:/home/klee/klee_build/klee/Release+Asserts/bin:$PATH
ENV KLEE_INCLUDE=/home/klee/klee_src/include

COPY nf /home/vigor/nf
COPY validator /home/vigor/validator
RUN sudo chown --recursive vigor:vigor /home/vigor/nf
RUN sudo chown --recursive vigor:vigor /home/vigor/validator
WORKDIR /home/vigor
#RUN cd nat && make verify
#RUN cd validator && ./test_all.sh ../nat/klee-last aaa

